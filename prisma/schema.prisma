// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bookings      Booking[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Barbershop {
  id       String @id @default(uuid())
  name     String
  address  String
  imageUrl String @map("image_url")

  services Service[]
  bookings Booking[]

  @@map("barbershops")
}

model Service {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String?

  bookings Booking[]

  barbershop   Barbershop? @relation(fields: [barbershopId], references: [id])
  barbershopId String?

  @@map("services")
}

model Booking {
  id        String    @id @default(uuid())
  date      DateTime
  status    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user         User?       @relation(fields: [userId], references: [id])
  userId       String?
  service      Service?    @relation(fields: [serviceId], references: [id])
  serviceId    String?
  barbershop   Barbershop? @relation(fields: [barbershopId], references: [id])
  barbershopId String?

  @@map("bookings")
}
